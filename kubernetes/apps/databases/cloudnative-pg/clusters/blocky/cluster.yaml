---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: &dbname cnpg-blocky
  namespace: databases
spec:
  instances: 1
  imageName: ghcr.io/cloudnative-pg/postgresql:16.1-18
  primaryUpdateStrategy: unsupervised
  storage:
    size: 500Mi
    storageClass: openebs-hostpath
  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
    nodeSelector:
      openebs.io/storage: "true"
  resources:
    requests:
      cpu: 100m
      memory: 1Gi
    limits:
      cpu: 500m
      memory: 2Gi
  postgresql:
    parameters:
      max_connections: "300"
      max_slot_wal_keep_size: 2GB
      shared_buffers: 512MB
  monitoring:
    enablePodMonitor: true
  superuserSecret:
    name: pg-su-secret
  enableSuperuserAccess: true
  bootstrap:
    initdb:
      database: blocky
      owner: blocky
      secret:
        name: pg-blocky-secret
  # backup:
  #   retentionPolicy: 30d
  #   barmanObjectStore: &barmanObjectStore
  #     data:
  #       compression: bzip2
  #     wal:
  #       compression: bzip2
  #       maxParallel: 8
  #     destinationPath: s3://${AWS_BUCKET_NAME}/cnpg/blocky
  #     serverName: *dbname
  #     s3Credentials:
  #       accessKeyId:
  #         name: pg-su-secret
  #         key: AWS_ACCESS_KEY
  #       secretAccessKey:
  #         name: pg-su-secret
  #         key: AWS_SECRET_KEY

  # bootstrap:
  #   # use this to recover a net-new cluster from a backup
  #   recovery:
  #     source: postgres-backup

    # # use this to 'migrate' from an existing cnpg cluster (e.g. "cluster-pg14") to the new cluster
    # initdb:
    #   import:
    #     type: monolith
    #     databases:
    #       - "*"
    #     roles:
    #       - "*"
    #     source:
    #       externalCluster: cluster-pg14

  # externalClusters:
  #   # this represents the s3 backup to restore from. *nota-bene: the backup must be the same major version of the target cluster
  #   - name: postgres-backup
  #     barmanObjectStore:
  #       wal:
  #         compression: bzip2
  #         maxParallel: 8
  #       destinationPath: s3://${AWS_BUCKET_NAME}/cnpg/blocky
  #       s3Credentials:
  #         accessKeyId:
  #           name: pg-su-secret
  #           key: AWS_ACCESS_KEY
  #         secretAccessKey:
  #           name: pg-su-secret
  #           key: AWS_SECRET_KEY
